{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danep\\\\OneDrive\\\\Desktop\\\\EngineeringDesign2\\\\Testing1\\\\FrontEnd\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Activity, Satellite, Wifi, TrendingUp, Image } from 'lucide-react';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const navigate = useNavigate();\n  const [systemStatus, setSystemStatus] = useState({\n    antenna: 'Loading...',\n    tracking: 'Loading...',\n    signal: 'Loading...',\n    satellites: 0\n  });\n\n  // Fetch system status from existing backend endpoints\n  useEffect(() => {\n    const fetchSystemStatus = async () => {\n      try {\n        // Get all satellite data to determine status\n        const response = await fetch('http://localhost:5000/');\n        const data = await response.text();\n\n        // Since we can't modify backend, we'll derive status from available data\n        // Check if we can get satellite data (this would indicate system is working)\n        const satelliteResponse = await fetch('http://localhost:5000/1');\n        const satelliteData = await satelliteResponse.json();\n\n        // Derive status based on available data\n        setSystemStatus({\n          antenna: satelliteData.id ? 'Connected' : 'Disconnected',\n          tracking: satelliteData.satellite ? 'Active' : 'Inactive',\n          signal: satelliteData.satellite ? 'Strong' : 'Weak',\n          satellites: satelliteData.id ? 1 : 0\n        });\n      } catch (error) {\n        console.error('Error fetching system status:', error);\n        // Set default values if backend is not available\n        setSystemStatus({\n          antenna: 'Disconnected',\n          tracking: 'Inactive',\n          signal: 'Weak',\n          satellites: 0\n        });\n      }\n    };\n\n    // Fetch immediately\n    fetchSystemStatus();\n\n    // Then fetch every 10 seconds to keep data fresh\n    const interval = setInterval(fetchSystemStatus, 10000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n  const statusCards = [{\n    title: 'Antenna Status',\n    value: systemStatus.antenna,\n    icon: Wifi,\n    color: '#00d4ff',\n    status: systemStatus.antenna === 'Connected' ? 'good' : 'warning'\n  }, {\n    title: 'Tracking Status',\n    value: systemStatus.tracking,\n    icon: Satellite,\n    color: '#00ff88',\n    status: systemStatus.tracking === 'Active' ? 'good' : 'warning'\n  }, {\n    title: 'Signal Strength',\n    value: systemStatus.signal,\n    icon: Activity,\n    color: '#ff6b6b',\n    status: systemStatus.signal === 'Strong' ? 'good' : 'warning'\n  }, {\n    title: 'Satellites Tracked',\n    value: systemStatus.satellites,\n    icon: TrendingUp,\n    color: '#ffd93d',\n    status: systemStatus.satellites > 0 ? 'good' : 'warning'\n  }];\n  const handleStartTracking = () => {\n    navigate('/tracker');\n  };\n  const handleViewImages = () => {\n    navigate('/images');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"System Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Real-time monitoring of your satellite antenna tracking system\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quick-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Quick Actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-btn primary\",\n          onClick: handleStartTracking,\n          children: [/*#__PURE__*/_jsxDEV(Satellite, {\n            className: \"btn-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), \"Start Tracking\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-btn secondary\",\n          onClick: handleViewImages,\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            className: \"btn-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), \"View Images\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-grid\",\n      children: statusCards.map((card, index) => {\n        const Icon = card.icon;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header\",\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              className: \"card-icon\",\n              style: {\n                color: card.color\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: card.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-value\",\n            children: card.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `card-status ${card.status}`,\n            children: card.status === 'good' ? 'Operational' : 'Warning'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"IP0t8/deYH6nZDTZfeOIy63PIP4=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Activity","Satellite","Wifi","TrendingUp","Image","jsxDEV","_jsxDEV","Dashboard","_s","navigate","systemStatus","setSystemStatus","antenna","tracking","signal","satellites","fetchSystemStatus","response","fetch","data","text","satelliteResponse","satelliteData","json","id","satellite","error","console","interval","setInterval","clearInterval","statusCards","title","value","icon","color","status","handleStartTracking","handleViewImages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","card","index","Icon","style","_c","$RefreshReg$"],"sources":["C:/Users/danep/OneDrive/Desktop/EngineeringDesign2/Testing1/FrontEnd/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Activity, Satellite, Wifi, TrendingUp, Image } from 'lucide-react';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  const navigate = useNavigate();\r\n  const [systemStatus, setSystemStatus] = useState({\r\n    antenna: 'Loading...', \r\n    tracking: 'Loading...', \r\n    signal: 'Loading...', \r\n    satellites: 0 \r\n  });\r\n\r\n  // Fetch system status from existing backend endpoints\r\n  useEffect(() => {\r\n    const fetchSystemStatus = async () => {\r\n      try {\r\n        // Get all satellite data to determine status\r\n        const response = await fetch('http://localhost:5000/');\r\n        const data = await response.text();\r\n        \r\n        // Since we can't modify backend, we'll derive status from available data\r\n        // Check if we can get satellite data (this would indicate system is working)\r\n        const satelliteResponse = await fetch('http://localhost:5000/1');\r\n        const satelliteData = await satelliteResponse.json();\r\n        \r\n        // Derive status based on available data\r\n        setSystemStatus({\r\n          antenna: satelliteData.id ? 'Connected' : 'Disconnected',\r\n          tracking: satelliteData.satellite ? 'Active' : 'Inactive', \r\n          signal: satelliteData.satellite ? 'Strong' : 'Weak',\r\n          satellites: satelliteData.id ? 1 : 0\r\n        });\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching system status:', error);\r\n        // Set default values if backend is not available\r\n        setSystemStatus({\r\n          antenna: 'Disconnected',\r\n          tracking: 'Inactive',\r\n          signal: 'Weak', \r\n          satellites: 0\r\n        });\r\n      }\r\n    };\r\n\r\n    // Fetch immediately\r\n    fetchSystemStatus();\r\n\r\n    // Then fetch every 10 seconds to keep data fresh\r\n    const interval = setInterval(fetchSystemStatus, 10000);\r\n\r\n    // Cleanup interval on component unmount\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const statusCards = [\r\n    {\r\n      title: 'Antenna Status',\r\n      value: systemStatus.antenna,\r\n      icon: Wifi,\r\n      color: '#00d4ff',\r\n      status: systemStatus.antenna === 'Connected' ? 'good' : 'warning'\r\n    },\r\n    {\r\n      title: 'Tracking Status', \r\n      value: systemStatus.tracking,\r\n      icon: Satellite,\r\n      color: '#00ff88',\r\n      status: systemStatus.tracking === 'Active' ? 'good' : 'warning'\r\n    },\r\n    {\r\n      title: 'Signal Strength',\r\n      value: systemStatus.signal,\r\n      icon: Activity,\r\n      color: '#ff6b6b',\r\n      status: systemStatus.signal === 'Strong' ? 'good' : 'warning'\r\n    },\r\n    {\r\n      title: 'Satellites Tracked',\r\n      value: systemStatus.satellites,\r\n      icon: TrendingUp,\r\n      color: '#ffd93d',\r\n      status: systemStatus.satellites > 0 ? 'good' : 'warning'\r\n    }\r\n  ];\r\n\r\n  const handleStartTracking = () => {\r\n    navigate('/tracker');\r\n  };\r\n\r\n  const handleViewImages = () => {\r\n    navigate('/images');\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"dashboard-header\">\r\n        <h2>System Dashboard</h2>\r\n        <p>Real-time monitoring of your satellite antenna tracking system</p>\r\n      </div>\r\n\r\n      <div className=\"quick-actions\">\r\n        <h3>Quick Actions</h3>\r\n        <div className=\"actions-grid\">\r\n          <button className=\"action-btn primary\" onClick={handleStartTracking}>\r\n            <Satellite className=\"btn-icon\" />\r\n            Start Tracking\r\n          </button>\r\n          <button className=\"action-btn secondary\" onClick={handleViewImages}>\r\n            <Image className=\"btn-icon\" />\r\n            View Images\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"status-grid\">\r\n        {statusCards.map((card, index) => {\r\n          const Icon = card.icon;\r\n          return (\r\n            <div key={index} className=\"status-card\">\r\n              <div className=\"card-header\">\r\n                <Icon className=\"card-icon\" style={{ color: card.color }} />\r\n                <h3>{card.title}</h3>\r\n              </div>\r\n              <div className=\"card-value\">{card.value}</div>\r\n              <div className={`card-status ${card.status}`}>\r\n                {card.status === 'good' ? 'Operational' : 'Warning'}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,EAAEC,SAAS,EAAEC,IAAI,EAAEC,UAAU,EAAEC,KAAK,QAAQ,cAAc;AAC3E,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC;IAC/Ce,OAAO,EAAE,YAAY;IACrBC,QAAQ,EAAE,YAAY;IACtBC,MAAM,EAAE,YAAY;IACpBC,UAAU,EAAE;EACd,CAAC,CAAC;;EAEF;EACAjB,SAAS,CAAC,MAAM;IACd,MAAMkB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,CAAC;QACtD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACA;QACA,MAAMC,iBAAiB,GAAG,MAAMH,KAAK,CAAC,yBAAyB,CAAC;QAChE,MAAMI,aAAa,GAAG,MAAMD,iBAAiB,CAACE,IAAI,CAAC,CAAC;;QAEpD;QACAZ,eAAe,CAAC;UACdC,OAAO,EAAEU,aAAa,CAACE,EAAE,GAAG,WAAW,GAAG,cAAc;UACxDX,QAAQ,EAAES,aAAa,CAACG,SAAS,GAAG,QAAQ,GAAG,UAAU;UACzDX,MAAM,EAAEQ,aAAa,CAACG,SAAS,GAAG,QAAQ,GAAG,MAAM;UACnDV,UAAU,EAAEO,aAAa,CAACE,EAAE,GAAG,CAAC,GAAG;QACrC,CAAC,CAAC;MAEJ,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD;QACAf,eAAe,CAAC;UACdC,OAAO,EAAE,cAAc;UACvBC,QAAQ,EAAE,UAAU;UACpBC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QACd,CAAC,CAAC;MACJ;IACF,CAAC;;IAED;IACAC,iBAAiB,CAAC,CAAC;;IAEnB;IACA,MAAMY,QAAQ,GAAGC,WAAW,CAACb,iBAAiB,EAAE,KAAK,CAAC;;IAEtD;IACA,OAAO,MAAMc,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,WAAW,GAAG,CAClB;IACEC,KAAK,EAAE,gBAAgB;IACvBC,KAAK,EAAEvB,YAAY,CAACE,OAAO;IAC3BsB,IAAI,EAAEhC,IAAI;IACViC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE1B,YAAY,CAACE,OAAO,KAAK,WAAW,GAAG,MAAM,GAAG;EAC1D,CAAC,EACD;IACEoB,KAAK,EAAE,iBAAiB;IACxBC,KAAK,EAAEvB,YAAY,CAACG,QAAQ;IAC5BqB,IAAI,EAAEjC,SAAS;IACfkC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE1B,YAAY,CAACG,QAAQ,KAAK,QAAQ,GAAG,MAAM,GAAG;EACxD,CAAC,EACD;IACEmB,KAAK,EAAE,iBAAiB;IACxBC,KAAK,EAAEvB,YAAY,CAACI,MAAM;IAC1BoB,IAAI,EAAElC,QAAQ;IACdmC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE1B,YAAY,CAACI,MAAM,KAAK,QAAQ,GAAG,MAAM,GAAG;EACtD,CAAC,EACD;IACEkB,KAAK,EAAE,oBAAoB;IAC3BC,KAAK,EAAEvB,YAAY,CAACK,UAAU;IAC9BmB,IAAI,EAAE/B,UAAU;IAChBgC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE1B,YAAY,CAACK,UAAU,GAAG,CAAC,GAAG,MAAM,GAAG;EACjD,CAAC,CACF;EAED,MAAMsB,mBAAmB,GAAGA,CAAA,KAAM;IAChC5B,QAAQ,CAAC,UAAU,CAAC;EACtB,CAAC;EAED,MAAM6B,gBAAgB,GAAGA,CAAA,KAAM;IAC7B7B,QAAQ,CAAC,SAAS,CAAC;EACrB,CAAC;EAED,oBACEH,OAAA;IAAKiC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBlC,OAAA;MAAKiC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BlC,OAAA;QAAAkC,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBtC,OAAA;QAAAkC,QAAA,EAAG;MAA8D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC,eAENtC,OAAA;MAAKiC,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BlC,OAAA;QAAAkC,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBtC,OAAA;QAAKiC,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BlC,OAAA;UAAQiC,SAAS,EAAC,oBAAoB;UAACM,OAAO,EAAER,mBAAoB;UAAAG,QAAA,gBAClElC,OAAA,CAACL,SAAS;YAACsC,SAAS,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,kBAEpC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTtC,OAAA;UAAQiC,SAAS,EAAC,sBAAsB;UAACM,OAAO,EAAEP,gBAAiB;UAAAE,QAAA,gBACjElC,OAAA,CAACF,KAAK;YAACmC,SAAS,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAEhC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENtC,OAAA;MAAKiC,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzBT,WAAW,CAACe,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;QAChC,MAAMC,IAAI,GAAGF,IAAI,CAACb,IAAI;QACtB,oBACE5B,OAAA;UAAiBiC,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACtClC,OAAA;YAAKiC,SAAS,EAAC,aAAa;YAAAC,QAAA,gBAC1BlC,OAAA,CAAC2C,IAAI;cAACV,SAAS,EAAC,WAAW;cAACW,KAAK,EAAE;gBAAEf,KAAK,EAAEY,IAAI,CAACZ;cAAM;YAAE;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC5DtC,OAAA;cAAAkC,QAAA,EAAKO,IAAI,CAACf;YAAK;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClB,CAAC,eACNtC,OAAA;YAAKiC,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEO,IAAI,CAACd;UAAK;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC9CtC,OAAA;YAAKiC,SAAS,EAAE,eAAeQ,IAAI,CAACX,MAAM,EAAG;YAAAI,QAAA,EAC1CO,IAAI,CAACX,MAAM,KAAK,MAAM,GAAG,aAAa,GAAG;UAAS;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChD,CAAC;QAAA,GAREI,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASV,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpC,EAAA,CAnIID,SAAS;EAAA,QACIR,WAAW;AAAA;AAAAoD,EAAA,GADxB5C,SAAS;AAqIf,eAAeA,SAAS;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}